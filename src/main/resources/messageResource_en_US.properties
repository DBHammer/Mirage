GetTableNameSuccessfully=Get the table name successfully, the table name is: {}
StartGettingColumnMetadata=Start getting column metadata information for table {}
ColumnMetadataHasLoaded=The column metadata information of table {} has been loaded
GetColumnMetadataSuccessfully=Get the column metadata information of table {} successfully
StartGettingTheDataDistributionOfTable=Start getting the data distribution of table {}
GetTheDataDistributionOfTableSuccessfully=Get the data distribution of table {} successfully
CleanupQueryPlanCompleted=Cleanup query plan completed
ObtainTableStructureAndDataDistributionSuccessfully=Obtain table structure and data distribution successfully
StartPersistingTableStructureInformation=Start persisting table structure information
PersistenceOfTableStructureInformationSucceeded=Persistence of table structure information succeeded
StartPersistingDataDistributionInformation=Start persisting data distribution information
PersistentDataDistributionInformationSucceeded=Persistent data distribution information succeeded
StartCleaningUpTheQueryPlan=Start cleaning up the query plan
RemoveSomeAggregationNodeOnAttributes={} delete some aggregate nodes on attributes {}
RemoveSomeChainsWithFilterOnKeysFrom=Remove some chains from {} that filter on keys
StartGettingQueryPlans=Start getting query plans
StartGetting=start getting {}
GetQueryPlanDone=Get query plan done
StartPersistingTableReferenceInformation=Start persisting table reference information
PersistentTableReferenceInformationSucceeded=Persistent table reference information succeeded
StartInstantiatingTheQueryPlan=Start instantiating the query plan
TheInstantiatedQueryPlanSucceed=The instantiated query plan is successful, and the instantiated parameter is {}
StartPersistentQueryPlanWithNewDataDistribution=Start persistent query plan with new data distribution
StartPersistentQueryPlan=Start persistent query plan
PersistentQueryPlanCompleted=Persistent query plan completed
StartPopulatingTheQueryTemplate=Start populating the query template
FillInTheQueryTemplateComplete=Fill in the query template complete
TheParametersThatWereNotSuccessfullyReplaced=The parameters that were not successfully replaced are as follows {}
UnsupportedDatabaseType=Unsupported database type
SkipSelfJoinNode=skip node {} due to self join
SkipNodeDueToFullTableScan=Since the input primary key is the complete set, skip the node {}
SkipNodeDueToFullPk=Since the input of the primary key corresponding to the join node is the complete set, skip the node {}
InvalidUnderlyingNode=The underlying node %s can only be select or scan
FailToExtractConstraintChain=Failed to extract constraint chain
SkipNodeDueToRatio=%s, but the ratio of the number of node rows to tableSize is less than the threshold, skip node %s
FailToExtractQueryTree=Query tree extraction failed
FailToConstructConstraintChain=Constraint chain construction failed
GetComplete=Status: Get complete
SkipPKAggAfterOuterJoin=Skip Primary key aggregation after outer join
SkipAggOperatorWithoutGroupKeyAndFilter=Skip aggregation operators without Group Key and filter conditions
UnsupportedOtherConditionsInJoin=The join contains other conditions, which are not supported at the moment
UnsupportedMulyiTablesInConstraints=Constraints that contain multiple tables in join are not supported yet
CannotRecognizeMultipleTables=can not recognize Multiple tables
AddReferenceDependencies=Add reference dependencies: {}.{} reference {}.{}
CannotReplace1=Please note that there are parameters in {} that cannot be replaced, please check the sql output and replace manually
CannotReplace2=Please note that there are parameters in {} that appear multiple times and cannot be replaced intelligently. Please check the sql output and replace manually
AggOperatorCannotBeSupportedInQuery=Aggregate operator {} cannot be supported in query
RemoveConstraintChain1=Since it does not participate in Join and key-value-related Aggregation, remove the constraint chain{} in the query{}
ConstraintChainClassification=There are {} chains containing foreign key constraints, {} chains that do not need to deduce primary key information, and {} constraint chains that require deriving primary key information
CreateGraphicalFolderForConstraintChains=Create a graphical folder for constraint chains
StateOfTable=SEMI JOIN/OUTER JOIN, is the {}th state of the {}th table, and Cardinality is {}
LocationOfAgg=Aggregation, is the {}th table, Cardinality is {}
DoublePKInConstraintChain=There is a double primary key in the constraint chain
StartQueryTemplating=Start query templating
createResultDir=Output folder does not exist, create folder {}
createResultDirFail=Output folder does not exist, failed to create folder {}
skipSelfJoin=skip node due to self join {}
deleteOldData=delete old data {}
showStatusVectorTable={}'s status vector table is
startDataOutPut=Start outputting table data {}, the total amount of data is {}
generateFromTo=Start generating data from {} to {}
constructCpModelCostTime=cost time {} ms
indexJoinInfo=The amount of data output by indexJoin is:{}, which is the {}th state of the {}th table
statusDataOutput=The amount of data output is:{}, the {}th state of the {}th table
addDistinctConstraint=Add distinct constraints to the operator {} with size {}
dataEmpty=The data in the column is empty
cardinalityNotEnough={}'cardinality is not enough, increase {}
unsupportedOperatorConversions=Unsupported operator conversions {}
beyondCDFRange=The parameter {} requests that the range exceeds the valid CDF space, increasing the non-Null probability by {}